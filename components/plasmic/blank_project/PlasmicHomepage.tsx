// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4msTxzQkVxmeBxU6hC5iDX
// Component: sl5p3sYKkHMv

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import TimeDisplay from "./TimeDisplay";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  usePlasmicDataConfig,
  executePlasmicDataOp,
  usePlasmicDataOp
} from "@plasmicapp/react-web/lib/data-sources";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Iframe } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: CMDBvOhaI4s/codeComponent
import Button from "../../Button"; // plasmic-import: I-446ENuriy/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponent
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components"; // plasmic-import: k4RvFQUTZKCU/codeComponentHelper
import TextInput from "../../TextInput"; // plasmic-import: OCOvXvczZkJ/component
import Button2 from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources"; // plasmic-import: gm654s-yiMSif/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 4msTxzQkVxmeBxU6hC5iDX/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: sl5p3sYKkHMv/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: Sbqp0mYDNdR/icon
import ChecksvgIcon from "../plasmic_tabs/icons/PlasmicIcon__Checksvg"; // plasmic-import: zq2s7N0xWucT/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon

export type PlasmicHomepage__VariantMembers = {
  unnamedVariant: "unnamedVariant";
};
export type PlasmicHomepage__VariantsArgs = {
  unnamedVariant?: SingleBooleanChoiceArg<"unnamedVariant">;
};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "unnamedVariant"
);

export type PlasmicHomepage__ArgsType = {
  clock?: string;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("clock");

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  ul?: p.Flex<"ul">;
  iframe?: p.Flex<typeof Iframe>;
  table?: p.Flex<typeof RichTable>;
  textInput2?: p.Flex<typeof TextInput>;
  textInput3?: p.Flex<typeof TextInput>;
  textInput4?: p.Flex<typeof TextInput>;
  textInput5?: p.Flex<typeof TextInput>;
  textInput6?: p.Flex<typeof TextInput>;
  textInput7?: p.Flex<typeof TextInput>;
  textInput8?: p.Flex<typeof TextInput>;
  textInput10?: p.Flex<typeof TextInput>;
  textInput9?: p.Flex<typeof TextInput>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          clock:
            "<div>Paste your embed code via the right sidebar</div>" as const
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "currentTab",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1 as const
      },
      {
        path: "textInput3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput6.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput7.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput8.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "textInput9.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "startTime",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "textInput10.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const { cache, mutate: swrMutate } = usePlasmicDataConfig();
  const mutate = swrMutate;

  const new$Queries = {
    query: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "q7oWrZbR7D2uoYCCVJdTaT",
            opId: "ac44e80f-0531-4b46-a3c7-afc33ea7254f",
            userArgs: {},
            cacheKey: "plasmic.$._lBzu9OLy.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch {
          return undefined;
        }
      })()
    ),
    query2: usePlasmicDataOp(
      (() => {
        try {
          return {
            sourceId: "hPL778ruEdmyrfSSXLAc7T",
            opId: "2e8f740e-090d-49df-870b-e58737797032",
            userArgs: {},
            cacheKey: "plasmic.$.SdhLzypIC.$.",
            invalidatedKeys: null,
            roleId: null
          };
        } catch {
          return undefined;
        }
      })()
    )
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root,
            {
              [sty.rootunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            }
          )}
        >
          <section
            className={classNames(projectcss.all, sty.section__ykvBg, {
              [sty.sectionunnamedVariant__ykvBgzhk3W]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
          >
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                projectcss.all,
                projectcss.h1,
                projectcss.__wab_text,
                sty.h1
              )}
            >
              {"The Ethical Hacker..."}
            </h1>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___2BGgu,
                {
                  [sty.textunnamedVariant___2BGguzhk3W]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                }
              )}
            >
              {hasVariant($state, "unnamedVariant", "unnamedVariant") ? (
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <ul
                      data-plasmic-name={"ul"}
                      data-plasmic-override={overrides.ul}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.ul,
                        {
                          [sty.ulunnamedVariant]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___75BDq,
                          {
                            [sty.liunnamedVariant___75BDQzhk3W]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? "doesn't hack with bad intentions."
                          : "doesn't hack with bad intentions."}
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__pGLv8,
                          {
                            [sty.liunnamedVariant__pGLv8Zhk3W]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? "hacks for the good of society."
                          : "hacks for the good of society."}
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___62U3,
                          {
                            [sty.liunnamedVariant___62U3Zhk3W]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? "shares their findings."
                          : "shares their findings."}
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___2Lagg,
                          {
                            [sty.liunnamedVariant___2Laggzhk3W]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? "can be anyone."
                          : "can be anyone."}
                      </li>
                    </ul>
                  }
                  <React.Fragment>
                    {
                      "\nThe ethical hacker today... is you! Learn how to hack a Linux system, while racing against the clock to beat your friends. Please note, for an incorrect answer, there will be no message and the button simply won't work."
                    }
                  </React.Fragment>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  {
                    <ul
                      data-plasmic-name={"ul"}
                      data-plasmic-override={overrides.ul}
                      className={classNames(
                        projectcss.all,
                        projectcss.ul,
                        sty.ul,
                        {
                          [sty.ulunnamedVariant]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___75BDq,
                          {
                            [sty.liunnamedVariant___75BDQzhk3W]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? "doesn't hack with bad intentions."
                          : "doesn't hack with bad intentions."}
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li__pGLv8,
                          {
                            [sty.liunnamedVariant__pGLv8Zhk3W]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? "hacks for the good of society."
                          : "hacks for the good of society."}
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___62U3,
                          {
                            [sty.liunnamedVariant___62U3Zhk3W]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? "shares their findings."
                          : "shares their findings."}
                      </li>
                      <li
                        className={classNames(
                          projectcss.all,
                          projectcss.li,
                          projectcss.__wab_text,
                          sty.li___2Lagg,
                          {
                            [sty.liunnamedVariant___2Laggzhk3W]: hasVariant(
                              $state,
                              "unnamedVariant",
                              "unnamedVariant"
                            )
                          }
                        )}
                      >
                        {hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? "can be anyone."
                          : "can be anyone."}
                      </li>
                    </ul>
                  }
                  <React.Fragment>
                    {
                      "\nThe ethical hacker today... is you! Find out how to hack a Linux system, while racing against the clock to beat your friends! Please note, for an incorrect answer, there will be no message and the button simply won't work."
                    }
                  </React.Fragment>
                </React.Fragment>
              )}
            </div>
          </section>
          <Iframe
            data-plasmic-name={"iframe"}
            data-plasmic-override={overrides.iframe}
            className={classNames("__wab_instance", sty.iframe, {
              [sty.iframeunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            })}
            preview={
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? true
                : true
            }
            src={
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? ("https://8d61-170-64-158-32.ngrok-free.app" as const)
                : ("https://8d61-170-64-158-32.ngrok-free.app" as const)
            }
          />

          {(
            hasVariant($state, "unnamedVariant", "unnamedVariant") ? true : true
          ) ? (
            <Button
              className={classNames("__wab_instance", sty.button__wIu6, {
                [sty.buttonunnamedVariant__wIu6Zhk3W]: hasVariant(
                  $state,
                  "unnamedVariant",
                  "unnamedVariant"
                )
              })}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg___3Jf9X)}
                  role={"img"}
                />
              }
              onClick={async event => {
                const $steps = {};
                $steps["updateTableSelectedRowKey"] = true
                  ? (() => {
                      const actionArgs = {
                        vgroup: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "h8mA_ZNGJ",
                            componentUuid: "sl5p3sYKkHMv",
                            argName: "vgroup"
                          },
                          () => "unnamedVariant"
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "h8mA_ZNGJ",
                            componentUuid: "sl5p3sYKkHMv",
                            argName: "operation"
                          },
                          () => 2
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariant",
                            interactionUuid: "h8mA_ZNGJ",
                            componentUuid: "sl5p3sYKkHMv",
                            argName: "value"
                          },
                          () => "unnamedVariant"
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariant",
                          interactionUuid: "h8mA_ZNGJ",
                          componentUuid: "sl5p3sYKkHMv"
                        },
                        () =>
                          (({ vgroup, value }) => {
                            if (typeof value === "string") {
                              value = [value];
                            }

                            const oldValue = p.get($state, vgroup);
                            p.set($state, vgroup, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateTableSelectedRowKey"] === "object" &&
                  typeof $steps["updateTableSelectedRowKey"].then === "function"
                ) {
                  $steps["updateTableSelectedRowKey"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariant",
                      interactionUuid: "h8mA_ZNGJ",
                      componentUuid: "sl5p3sYKkHMv"
                    },
                    $steps["updateTableSelectedRowKey"]
                  );
                }
                $steps["updateStartTime"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "5cRSslHok",
                            componentUuid: "sl5p3sYKkHMv",
                            argName: "variable"
                          },
                          () => ({
                            objRoot: $state,
                            variablePath: ["startTime"]
                          })
                        ),
                        operation: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "5cRSslHok",
                            componentUuid: "sl5p3sYKkHMv",
                            argName: "operation"
                          },
                          () => 0
                        ),
                        value: __wrapUserFunction(
                          {
                            type: "InteractionArgLoc",
                            actionName: "updateVariable",
                            interactionUuid: "5cRSslHok",
                            componentUuid: "sl5p3sYKkHMv",
                            argName: "value"
                          },
                          () => Date().slice(16, 24)
                        )
                      };
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "updateVariable",
                          interactionUuid: "5cRSslHok",
                          componentUuid: "sl5p3sYKkHMv"
                        },
                        () =>
                          (({ variable, value, startIndex, deleteCount }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            p.set(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["updateStartTime"] === "object" &&
                  typeof $steps["updateStartTime"].then === "function"
                ) {
                  $steps["updateStartTime"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "updateVariable",
                      interactionUuid: "5cRSslHok",
                      componentUuid: "sl5p3sYKkHMv"
                    },
                    $steps["updateStartTime"]
                  );
                }
              }}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__xb0XZ)}
                  role={"img"}
                />
              }
            >
              {"Begin"}
            </Button>
          ) : null}
          {(
            hasVariant($state, "unnamedVariant", "unnamedVariant") ? true : true
          )
            ? (() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.table, {
                    [sty.tableunnamedVariant]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  }),
                  data: (() => {
                    try {
                      return $queries.query2;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  fields: (() => {
                    const __composite = [
                      { key: "Name", fieldId: "Name" },
                      { key: "Time", fieldId: "Time", title: null }
                    ];
                    __composite["1"]["title"] = "Completion Time";
                    return __composite;
                  })(),

                  onRowSelectionChanged: async (...eventArgs) => {
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRowKey",
                      ["table", "selectedRowKey"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRow",
                      ["table", "selectedRow"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                    p.generateStateOnChangePropForCodeComponents(
                      $state,
                      "selectedRows",
                      ["table", "selectedRows"],
                      RichTable_Helpers
                    ).apply(null, eventArgs);
                  },
                  scopeClassName: sty["table__instance"],
                  selectedRowKey: p.generateStateValueProp($state, [
                    "table",
                    "selectedRowKey"
                  ]),
                  themeResetClassName: classNames(
                    projectcss.root_reset,
                    projectcss.root_reset_tags,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens
                  )
                };
                p.initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "selectedRowKey",
                      plasmicStateName: "table.selectedRowKey"
                    },
                    {
                      name: "selectedRow",
                      plasmicStateName: "table.selectedRow"
                    },
                    {
                      name: "selectedRows",
                      plasmicStateName: "table.selectedRows"
                    }
                  ],
                  [],
                  RichTable_Helpers ?? {},
                  child$Props
                );

                return (
                  <RichTable
                    data-plasmic-name={"table"}
                    data-plasmic-override={overrides.table}
                    {...child$Props}
                  />
                );
              })()
            : null}
          {(
            hasVariant($state, "unnamedVariant", "unnamedVariant") ? true : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__f67Rt,
                {
                  [sty.textunnamedVariant__f67RTzhk3W]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                }
              )}
            >
              <TimeDisplay startTime={$state.startTime} />
            </div>
          ) : null}
          {(
            hasVariant($state, "unnamedVariant", "unnamedVariant")
              ? true
              : false
          ) ? (
            <section
              className={classNames(projectcss.all, sty.section___3HjFg, {
                [sty.sectionunnamedVariant___3HjFgzhk3W]: hasVariant(
                  $state,
                  "unnamedVariant",
                  "unnamedVariant"
                )
              })}
            >
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? (() => {
                      try {
                        return $state.currentTab == 1;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__olXqG, {
                    [sty.freeBoxunnamedVariant__olXqGzhk3W]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eexJa,
                        {
                          [sty.textunnamedVariant__eexJAzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__mm0Lg
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__duoXr
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3___922Im,
                                          {
                                            [sty.h3unnamedVariant___922Imzhk3W]:
                                              hasVariant(
                                                $state,
                                                "unnamedVariant",
                                                "unnamedVariant"
                                              )
                                          }
                                        )}
                                      >
                                        {"Welcome"}
                                      </h3>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uirfH,
                        {
                          [sty.textunnamedVariant__uirfHzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "Congrats! You have just been hired by Palo Alto Networks as their newest Security Engineer. Your first assignment today is to try and compromise a Linux system using an unprivileged user.\n\nThe connection details for the machine are below. Let's see if you can connect!\n\nUsername: foo\nPassword: bar\nIP address: 170.64.252.6 on port 2222\n\nOnce you connect, feel free to familiarise yourself with the terminal. Then, find out the user's UID using the id command. The UID is each Linux user's unique ID number that identifies them on the system."
                      }
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__wRuUz,
                        {
                          [sty.freeBoxunnamedVariant__wRuUZzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <TextInput
                          data-plasmic-name={"textInput2"}
                          data-plasmic-override={overrides.textInput2}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput2,
                            {
                              [sty.textInput2unnamedVariant]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__dsU6Q
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput2",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"UID" as const}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput2",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button__eotfb,
                            {
                              [sty.buttonunnamedVariant__eotfBzhk3W]:
                                hasVariant(
                                  $state,
                                  "unnamedVariant",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["runCode"] =
                              $state.textInput2.value == 1000
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "customFunction",
                                          interactionUuid: "IpbxWyXIvm",
                                          componentUuid: "sl5p3sYKkHMv",
                                          argName: "customFunction"
                                        },
                                        () => () => {
                                          return ($state.currentTab = 2);
                                        }
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "customFunction",
                                        interactionUuid: "IpbxWyXIvm",
                                        componentUuid: "sl5p3sYKkHMv"
                                      },
                                      () =>
                                        (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                            if (
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "IpbxWyXIvm",
                                  componentUuid: "sl5p3sYKkHMv"
                                },
                                $steps["runCode"]
                              );
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__p5FIa
                            )}
                          >
                            {"Submit"}
                          </div>
                        </Button2>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? (() => {
                      try {
                        return $state.currentTab == 2;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__bpWbF, {
                    [sty.freeBoxunnamedVariant__bpWbFzhk3W]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o6RTh,
                        {
                          [sty.textunnamedVariant__o6RThzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__rxTow
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__p93Ex
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3__fsYaS,
                                          {
                                            [sty.h3unnamedVariant__fsYaSzhk3W]:
                                              hasVariant(
                                                $state,
                                                "unnamedVariant",
                                                "unnamedVariant"
                                              )
                                          }
                                        )}
                                      >
                                        {"The Terminal"}
                                      </h3>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lgRb2,
                        {
                          [sty.textunnamedVariant__lgRb2Zhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        'This is your Linux terminal. You are free to run any command you wish, provided that you have the correct privileges to do so. Currently, you are the "foo" user, which is an unprivileged user without superuser permissions. This means that you are not able to edit any system files or run any system scripts. Some important commands on a Linux terminal include ls which lists the files in a directory, pwd which tells you which directory you are in, vim which helps to edit files, cd to change directory, and mkdir to make a directory. \n\nThe intended design for this program was to keep all users inside this environment. The client is a large corporation, and wants to ensure that no user is able to access sensitive information. As a security researcher, it is your job to find out if it is possible to exploit it.\n\nUsing the pwd command, find out what directory you are in.'
                      }
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__pfxvW,
                        {
                          [sty.freeBoxunnamedVariant__pfxvWzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <TextInput
                          data-plasmic-name={"textInput3"}
                          data-plasmic-override={overrides.textInput3}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput3,
                            {
                              [sty.textInput3unnamedVariant]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__xSuyI
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput3",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"Directory" as const}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput3",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button__cglBy,
                            {
                              [sty.buttonunnamedVariant__cglByzhk3W]:
                                hasVariant(
                                  $state,
                                  "unnamedVariant",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["runCode"] =
                              $state.textInput3.value == "/home/foo"
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "customFunction",
                                          interactionUuid: "Kvl5S6JSKD",
                                          componentUuid: "sl5p3sYKkHMv",
                                          argName: "customFunction"
                                        },
                                        () => () => {
                                          return ($state.currentTab = 3);
                                        }
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "customFunction",
                                        interactionUuid: "Kvl5S6JSKD",
                                        componentUuid: "sl5p3sYKkHMv"
                                      },
                                      () =>
                                        (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                            if (
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "Kvl5S6JSKD",
                                  componentUuid: "sl5p3sYKkHMv"
                                },
                                $steps["runCode"]
                              );
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hSIt8
                            )}
                          >
                            {"Submit"}
                          </div>
                        </Button2>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? (() => {
                      try {
                        return $state.currentTab == 3;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__lweIo, {
                    [sty.freeBoxunnamedVariant__lweIozhk3W]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0MOwT,
                        {
                          [sty.textunnamedVariant___0MOwTzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3___5KKwo
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__v7Mu
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3___4TL2S,
                                          {
                                            [sty.h3unnamedVariant___4TL2Szhk3W]:
                                              hasVariant(
                                                $state,
                                                "unnamedVariant",
                                                "unnamedVariant"
                                              )
                                          }
                                        )}
                                      >
                                        {"The Machine"}
                                      </h3>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tN2GG,
                        {
                          [sty.textunnamedVariant__tN2GGzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "Now, let's take a look at the machine itself. This machine runs Linux, which is an operating system geared towards developers and organisations. Linux is the most secure OS, but it doesn't mean that it has no vulnerabilities. \n\nUsually, these vulnerabilities stem from mis-configured systems - but in this case, the system is empty, so we need to look towards another attack vector. One of these is the kernel, which controls everything from boot to shutdown.\n\nUsing the uname -a command, what is the current kernel version?"
                      }
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0LBwj,
                        {
                          [sty.freeBoxunnamedVariant___0LBwjzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <TextInput
                          data-plasmic-name={"textInput4"}
                          data-plasmic-override={overrides.textInput4}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput4,
                            {
                              [sty.textInput4unnamedVariant]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__bvXcK
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput4",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"Kernel" as const}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput4",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button__iu0WS,
                            {
                              [sty.buttonunnamedVariant__iu0WSzhk3W]:
                                hasVariant(
                                  $state,
                                  "unnamedVariant",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["runCode"] =
                              $state.textInput4.value == "5.13.0-19"
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "customFunction",
                                          interactionUuid: "RBlWNX0g3P",
                                          componentUuid: "sl5p3sYKkHMv",
                                          argName: "customFunction"
                                        },
                                        () => () => {
                                          return ($state.currentTab = 4);
                                        }
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "customFunction",
                                        interactionUuid: "RBlWNX0g3P",
                                        componentUuid: "sl5p3sYKkHMv"
                                      },
                                      () =>
                                        (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                            if (
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "RBlWNX0g3P",
                                  componentUuid: "sl5p3sYKkHMv"
                                },
                                $steps["runCode"]
                              );
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qSSyj
                            )}
                          >
                            {"Submit"}
                          </div>
                        </Button2>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? (() => {
                      try {
                        return $state.currentTab == 4;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__cb05G, {
                    [sty.freeBoxunnamedVariant__cb05Gzhk3W]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3G0Xm,
                        {
                          [sty.textunnamedVariant___3G0Xmzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__wiNY
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__vO0Va
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3__uErGr,
                                          {
                                            [sty.h3unnamedVariant__uErGrzhk3W]:
                                              hasVariant(
                                                $state,
                                                "unnamedVariant",
                                                "unnamedVariant"
                                              )
                                          }
                                        )}
                                      >
                                        {"The Kernel"}
                                      </h3>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__h3Az,
                        {
                          [sty.textunnamedVariant__h3AZzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "As you may have found, this system is running Ubuntu 21.10, on Linux 5.13.0-19. Usually, kernel exploits affect older kernel versions, but it's always worth taking a look to see if there are any vulnerabilities, even on newer versions like this. These vulnerabilities exploit bugs in the kernel, allowing an unprivileged user to gain root by modifying system binaries, editing permissions, or abusing stacks. \n\nThis technique is called Local Privilege Escalation, or LPE for short, and is one of the easiest ways to gain root privileges on a Linux system, provided it is vulnerable.\n\nSearch the web for any exploits affecting this kernel, and find a CVE ID."
                      }
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__nfrac,
                        {
                          [sty.freeBoxunnamedVariant__nfraczhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <TextInput
                          data-plasmic-name={"textInput5"}
                          data-plasmic-override={overrides.textInput5}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput5,
                            {
                              [sty.textInput5unnamedVariant]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg___9PqIv
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput5",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"CVE ID" as const}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput5",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button__phxp2,
                            {
                              [sty.buttonunnamedVariant__phxp2Zhk3W]:
                                hasVariant(
                                  $state,
                                  "unnamedVariant",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["runCode"] =
                              $state.textInput5.value == "CVE-2022-0847"
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "customFunction",
                                          interactionUuid: "DIJxF-L7Zi",
                                          componentUuid: "sl5p3sYKkHMv",
                                          argName: "customFunction"
                                        },
                                        () => () => {
                                          return ($state.currentTab = 5);
                                        }
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "customFunction",
                                        interactionUuid: "DIJxF-L7Zi",
                                        componentUuid: "sl5p3sYKkHMv"
                                      },
                                      () =>
                                        (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                            if (
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "DIJxF-L7Zi",
                                  componentUuid: "sl5p3sYKkHMv"
                                },
                                $steps["runCode"]
                              );
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gHRzf
                            )}
                          >
                            {"Submit"}
                          </div>
                        </Button2>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? (() => {
                      try {
                        return $state.currentTab == 5;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__dI1Zu, {
                    [sty.freeBoxunnamedVariant__dI1ZUzhk3W]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kmi3R,
                        {
                          [sty.textunnamedVariant__kmi3Rzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__mHefY
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__q2Vat
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3__m0HV,
                                          {
                                            [sty.h3unnamedVariant__m0HVzhk3W]:
                                              hasVariant(
                                                $state,
                                                "unnamedVariant",
                                                "unnamedVariant"
                                              )
                                          }
                                        )}
                                      >
                                        {"Dirty Pipe"}
                                      </h3>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9XhXx,
                        {
                          [sty.textunnamedVariant___9XhXXzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "What you found was a kernel exploit titled Dirty Pipe. The Dirty Pipe vulnerability is a security flaw that affects the Linux kernel page cache - specifically the way the kernel handles the splice() system call and pipes. When exploited, it allows an underprivileged user to write arbitrary data to any file that user can read on the file system. It is similar to 2016’s Dirty COW vulnerability that targeted the copy-on-write (COW) mechanism in the Linux kernel’s memory subsystem.\n\nWith this vulnerability, we are able to gain root privileges. Let's attempt to download code to run the exploit. Once you download it, go inside the folder and count how many files are inside using ls.\n\n"
                          }
                        </React.Fragment>
                        {
                          <pre
                            className={classNames(
                              projectcss.all,
                              projectcss.pre,
                              projectcss.__wab_text,
                              sty.pre__zjjgv
                            )}
                          >
                            {
                              "git clone https://github.com/aydenbottos/CVE-2022-0847.git"
                            }
                          </pre>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__aNbmV,
                        {
                          [sty.freeBoxunnamedVariant__aNbmVzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <TextInput
                          data-plasmic-name={"textInput6"}
                          data-plasmic-override={overrides.textInput6}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput6,
                            {
                              [sty.textInput6unnamedVariant]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__m0PvY
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput6",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"Number of files" as const}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput6",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button__xudlc,
                            {
                              [sty.buttonunnamedVariant__xudlCzhk3W]:
                                hasVariant(
                                  $state,
                                  "unnamedVariant",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["runCode"] =
                              $state.textInput6.value == 2
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "customFunction",
                                          interactionUuid: "ceD-2dhhOl",
                                          componentUuid: "sl5p3sYKkHMv",
                                          argName: "customFunction"
                                        },
                                        () => () => {
                                          return ($state.currentTab = 6);
                                        }
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "customFunction",
                                        interactionUuid: "ceD-2dhhOl",
                                        componentUuid: "sl5p3sYKkHMv"
                                      },
                                      () =>
                                        (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                            if (
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "ceD-2dhhOl",
                                  componentUuid: "sl5p3sYKkHMv"
                                },
                                $steps["runCode"]
                              );
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__glYj
                            )}
                          >
                            {"Submit"}
                          </div>
                        </Button2>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? (() => {
                      try {
                        return $state.currentTab == 6;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___9NKly, {
                    [sty.freeBoxunnamedVariant___9NKlyzhk3W]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eZahT,
                        {
                          [sty.textunnamedVariant__eZahTzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__u1Fy
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__n3OTo
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3__dPVyV,
                                          {
                                            [sty.h3unnamedVariant__dPVyVzhk3W]:
                                              hasVariant(
                                                $state,
                                                "unnamedVariant",
                                                "unnamedVariant"
                                              )
                                          }
                                        )}
                                      >
                                        {"Compilation"}
                                      </h3>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fhAuv,
                        {
                          [sty.textunnamedVariant__fhAuVzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "Inside this directory are two C files. They are exploit-1.c and exploit-2.c. Exploit 1 relies on modifying the /etc/passwd file to change the root user's password, whereas exploit 2 relies on a special type of file called a SUID binary. We will use exploit 2 due to it being easier to use. To use the exploit, we must first compile it using a program called GCC. This program is called a compiler, and will turn our C code into a working program. Let's use the compiler, and then, find out what the output file is called using ls.\n\n"
                          }
                        </React.Fragment>
                        {
                          <pre
                            className={classNames(
                              projectcss.all,
                              projectcss.pre,
                              projectcss.__wab_text,
                              sty.pre__gmvqL
                            )}
                          >
                            {"gcc exploit-2.c -o $(whoami)"}
                          </pre>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7YDgr,
                        {
                          [sty.freeBoxunnamedVariant___7YDgrzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <TextInput
                          data-plasmic-name={"textInput7"}
                          data-plasmic-override={overrides.textInput7}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput7,
                            {
                              [sty.textInput7unnamedVariant]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__uuSvh
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput7",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"Filename" as const}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput7",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button__cOuXy,
                            {
                              [sty.buttonunnamedVariant__cOuXYzhk3W]:
                                hasVariant(
                                  $state,
                                  "unnamedVariant",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["runCode"] =
                              $state.textInput7.value == "foo"
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "customFunction",
                                          interactionUuid: "laAkAZOve7",
                                          componentUuid: "sl5p3sYKkHMv",
                                          argName: "customFunction"
                                        },
                                        () => () => {
                                          return ($state.currentTab = 7);
                                        }
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "customFunction",
                                        interactionUuid: "laAkAZOve7",
                                        componentUuid: "sl5p3sYKkHMv"
                                      },
                                      () =>
                                        (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                            if (
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "laAkAZOve7",
                                  componentUuid: "sl5p3sYKkHMv"
                                },
                                $steps["runCode"]
                              );
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vhn8U
                            )}
                          >
                            {"Submit"}
                          </div>
                        </Button2>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? (() => {
                      try {
                        return $state.currentTab == 7;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___0Gn6N, {
                    [sty.freeBoxunnamedVariant___0Gn6Nzhk3W]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6AZrR,
                        {
                          [sty.textunnamedVariant___6AZrRzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__sb0ZV
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__iOhb7
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3__xzX2V,
                                          {
                                            [sty.h3unnamedVariant__xzX2Vzhk3W]:
                                              hasVariant(
                                                $state,
                                                "unnamedVariant",
                                                "unnamedVariant"
                                              )
                                          }
                                        )}
                                      >
                                        {"Exploitation"}
                                      </h3>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8HZtT,
                        {
                          [sty.textunnamedVariant___8HZtTzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "Congrats on making it this far! We have now reached the final stage of our hack - running the exploit. In the directory, there should be a file named foo. This is our exploit program, and if all goes well, should break us out of the restricted environment, and give us root privileges. When running the binary, we will need one parameter, which is the program su. This program is a SUID program, meaning that it runs with root privileges regardless of who runs it. Normally, these programs require a root password, but our exploit gets around it. Run the exploit binary, then in the elevated shell, use the id command to find the UID of the root user.\n\n"
                          }
                        </React.Fragment>
                        {
                          <pre
                            className={classNames(
                              projectcss.all,
                              projectcss.pre,
                              projectcss.__wab_text,
                              sty.pre__xqEaU
                            )}
                          >
                            {"./foo /usr/bin/su"}
                          </pre>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__zCgK, {
                        [sty.freeBoxunnamedVariant__zCgKzhk3W]: hasVariant(
                          $state,
                          "unnamedVariant",
                          "unnamedVariant"
                        )
                      })}
                    >
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <TextInput
                          data-plasmic-name={"textInput8"}
                          data-plasmic-override={overrides.textInput8}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput8,
                            {
                              [sty.textInput8unnamedVariant]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__tBsah
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput8",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"UID" as const}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput8",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button__tfD,
                            {
                              [sty.buttonunnamedVariant__tfDZhk3W]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["runCode"] =
                              $state.textInput8.value == "0"
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "customFunction",
                                          interactionUuid: "_RN7kHZXH6",
                                          componentUuid: "sl5p3sYKkHMv",
                                          argName: "customFunction"
                                        },
                                        () => () => {
                                          return ($state.currentTab = 8);
                                        }
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "customFunction",
                                        interactionUuid: "_RN7kHZXH6",
                                        componentUuid: "sl5p3sYKkHMv"
                                      },
                                      () =>
                                        (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                            if (
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "_RN7kHZXH6",
                                  componentUuid: "sl5p3sYKkHMv"
                                },
                                $steps["runCode"]
                              );
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zFhyl
                            )}
                          >
                            {"Submit"}
                          </div>
                        </Button2>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? (() => {
                      try {
                        return $state.currentTab == 8;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__k4G0B, {
                    [sty.freeBoxunnamedVariant__k4G0Bzhk3W]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zrarZ,
                        {
                          [sty.textunnamedVariant__zrarZzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__nzzpm
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__omtim
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3__xirNp,
                                          {
                                            [sty.h3unnamedVariant__xirNPzhk3W]:
                                              hasVariant(
                                                $state,
                                                "unnamedVariant",
                                                "unnamedVariant"
                                              )
                                          }
                                        )}
                                      >
                                        {"Patching"}
                                      </h3>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___38AxD,
                        {
                          [sty.textunnamedVariant___38AxDzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "As we found, we have now entered a root shell. This means that we have unlimited privileges on the system, and can directly edit restricted files and run special programs. One of these programs is called APT. This is the package manager on Ubuntu, and helps us install, uninstall, and upgrade packages. As the current system is vulnerable, we need to update it to apply important security patches that fix the vulnerability. Find out what APT subcommand allows a user to update the system, and run it once you submit."
                      }
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__pQdsL,
                        {
                          [sty.freeBoxunnamedVariant__pQdsLzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <TextInput
                          data-plasmic-name={"textInput10"}
                          data-plasmic-override={overrides.textInput10}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput10,
                            {
                              [sty.textInput10unnamedVariant]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__aagik
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput10",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"Subcommand" as const}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput10",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button__pQaZu,
                            {
                              [sty.buttonunnamedVariant__pQaZuzhk3W]:
                                hasVariant(
                                  $state,
                                  "unnamedVariant",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["runCode"] =
                              $state.textInput10.value == "upgrade"
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: __wrapUserFunction(
                                        {
                                          type: "InteractionArgLoc",
                                          actionName: "customFunction",
                                          interactionUuid: "LJncrqIQ9e",
                                          componentUuid: "sl5p3sYKkHMv",
                                          argName: "customFunction"
                                        },
                                        () => () => {
                                          return ($state.currentTab = 9);
                                        }
                                      )
                                    };
                                    return __wrapUserFunction(
                                      {
                                        type: "InteractionLoc",
                                        actionName: "customFunction",
                                        interactionUuid: "LJncrqIQ9e",
                                        componentUuid: "sl5p3sYKkHMv"
                                      },
                                      () =>
                                        (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]),
                                      actionArgs
                                    );
                                  })()
                                : undefined;
                            if (
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await __wrapUserPromise(
                                {
                                  type: "InteractionLoc",
                                  actionName: "customFunction",
                                  interactionUuid: "LJncrqIQ9e",
                                  componentUuid: "sl5p3sYKkHMv"
                                },
                                $steps["runCode"]
                              );
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1LkDt
                            )}
                          >
                            {"Submit"}
                          </div>
                        </Button2>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant($state, "unnamedVariant", "unnamedVariant")
                  ? (() => {
                      try {
                        return $state.currentTab == 9;
                      } catch (e) {
                        if (e instanceof TypeError) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__l3ZGb, {
                    [sty.freeBoxunnamedVariant__l3ZGBzhk3W]: hasVariant(
                      $state,
                      "unnamedVariant",
                      "unnamedVariant"
                    )
                  })}
                >
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zX0J,
                        {
                          [sty.textunnamedVariant__zX0Jzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        {
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__lkdEw
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2___5MkAq
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>{""}</React.Fragment>
                                    {
                                      <h3
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.h3,
                                          projectcss.__wab_text,
                                          sty.h3__bWn0T,
                                          {
                                            [sty.h3unnamedVariant__bWn0Tzhk3W]:
                                              hasVariant(
                                                $state,
                                                "unnamedVariant",
                                                "unnamedVariant"
                                              )
                                          }
                                        )}
                                      >
                                        {"Finish"}
                                      </h3>
                                    }
                                    <React.Fragment>{""}</React.Fragment>
                                  </React.Fragment>
                                </h2>
                              }
                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </h3>
                        }
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__voZuF,
                        {
                          [sty.textunnamedVariant__voZuFzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {
                        "Fellow security engineer, I am proud to say, that you have successfully completed your first assignment. Today, you have learnt the basics of a Linux system, managed to exploit a kernel vulnerability to gain root privileges, and patched the vulnerability to ensure the security of the system. However, with great power, comes great responsibility. These exploits were not created to be used for malicious purposes, but rather to ensure that bugs in the Linux kernel were fixed before they could be used in the wild. Please do not use these abilities for the wrong reasons - it is not only against the law, but against the principles of open source and security research.\n\nFeel free to explore the system as you wish. Once you are done, exit the page to free up a slot for another user. Make sure to enter your name so your time is recorded!"
                      }
                    </div>
                  ) : null}
                  {(
                    hasVariant($state, "unnamedVariant", "unnamedVariant")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5PXq,
                        {
                          [sty.freeBoxunnamedVariant___5PXqzhk3W]: hasVariant(
                            $state,
                            "unnamedVariant",
                            "unnamedVariant"
                          )
                        }
                      )}
                    >
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <TextInput
                          data-plasmic-name={"textInput9"}
                          data-plasmic-override={overrides.textInput9}
                          className={classNames(
                            "__wab_instance",
                            sty.textInput9,
                            {
                              [sty.textInput9unnamedVariant]: hasVariant(
                                $state,
                                "unnamedVariant",
                                "unnamedVariant"
                              )
                            }
                          )}
                          endIcon={
                            <svg
                              className={classNames(
                                projectcss.all,
                                sty.svg__zohxM
                              )}
                              role={"img"}
                            />
                          }
                          onChange={(...eventArgs) => {
                            p.generateStateOnChangeProp($state, [
                              "textInput9",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }}
                          placeholder={"Name" as const}
                          value={
                            p.generateStateValueProp($state, [
                              "textInput9",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                      {(
                        hasVariant($state, "unnamedVariant", "unnamedVariant")
                          ? true
                          : true
                      ) ? (
                        <Button2
                          className={classNames(
                            "__wab_instance",
                            sty.button__ri4C7,
                            {
                              [sty.buttonunnamedVariant__ri4C7Zhk3W]:
                                hasVariant(
                                  $state,
                                  "unnamedVariant",
                                  "unnamedVariant"
                                )
                            }
                          )}
                          onClick={async event => {
                            const $steps = {};
                            $steps["airtableCreate"] = true
                              ? (() => {
                                  const actionArgs = {
                                    dataOp: __wrapUserFunction(
                                      {
                                        type: "InteractionArgLoc",
                                        actionName: "dataSourceOp",
                                        interactionUuid: "6HxCz00R-8",
                                        componentUuid: "sl5p3sYKkHMv",
                                        argName: "dataOp"
                                      },
                                      () => ({
                                        sourceId: "hPL778ruEdmyrfSSXLAc7T",
                                        opId: "8d1ad438-8ecb-409f-b13e-b923d4779420",
                                        userArgs: {
                                          variables: [
                                            (() => {
                                              try {
                                                return $state.textInput9.value;
                                              } catch (e) {
                                                if (e instanceof TypeError) {
                                                  return null;
                                                }
                                                throw e;
                                              }
                                            })(),
                                            (() => {
                                              try {
                                                return new Date(
                                                  Number(new Date()) -
                                                    Number(
                                                      new Date(
                                                        new Date().toDateString() +
                                                          " " +
                                                          $state.startTime
                                                      )
                                                    )
                                                )
                                                  .toUTCString()
                                                  .slice(17, 25);
                                              } catch (e) {
                                                if (e instanceof TypeError) {
                                                  return null;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        },
                                        cacheKey: null,
                                        invalidatedKeys: [
                                          "plasmic_refresh_all"
                                        ],
                                        roleId: null
                                      })
                                    )
                                  };
                                  return __wrapUserFunction(
                                    {
                                      type: "InteractionLoc",
                                      actionName: "dataSourceOp",
                                      interactionUuid: "6HxCz00R-8",
                                      componentUuid: "sl5p3sYKkHMv"
                                    },
                                    () =>
                                      (async ({ dataOp, continueOnError }) => {
                                        try {
                                          const response =
                                            await executePlasmicDataOp(dataOp, {
                                              userAuthToken:
                                                dataSourcesCtx?.userAuthToken
                                            });
                                          if (
                                            dataOp.invalidatedKeys &&
                                            dataOp.invalidatedKeys.find(
                                              key =>
                                                key === "plasmic_refresh_all"
                                            )
                                          ) {
                                            await Promise.all(
                                              Array.from(cache.keys()).map(
                                                async key => mutate(key)
                                              )
                                            );
                                            return response;
                                          }
                                          if (dataOp.invalidatedKeys) {
                                            await Promise.all(
                                              dataOp.invalidatedKeys.map(
                                                async invalidateKey =>
                                                  Promise.all(
                                                    Array.from(
                                                      cache.keys()
                                                    ).map(async key => {
                                                      if (
                                                        typeof key ===
                                                          "string" &&
                                                        key.includes(
                                                          `.$.${invalidateKey}.$.`
                                                        )
                                                      ) {
                                                        return mutate(key);
                                                      }
                                                      return Promise.resolve();
                                                    })
                                                  )
                                              )
                                            );
                                          }
                                          return response;
                                        } catch (e) {
                                          if (!continueOnError) {
                                            throw e;
                                          }
                                          return e;
                                        }
                                      })?.apply(null, [actionArgs]),
                                    actionArgs
                                  );
                                })()
                              : undefined;
                            if (
                              typeof $steps["airtableCreate"] === "object" &&
                              typeof $steps["airtableCreate"].then ===
                                "function"
                            ) {
                              $steps["airtableCreate"] =
                                await __wrapUserPromise(
                                  {
                                    type: "InteractionLoc",
                                    actionName: "dataSourceOp",
                                    interactionUuid: "6HxCz00R-8",
                                    componentUuid: "sl5p3sYKkHMv"
                                  },
                                  $steps["airtableCreate"]
                                );
                            }

                            // Hide the text on click
                            const textElement = document.querySelector(".PlasmicHomepage_text__f67Rt__cqS9s");
                            if (textElement) {
                              textElement.style.display = "none";
                            }
                          }}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qdCbt
                            )}
                          >
                            {"Submit"}
                          </div>
                        </Button2>
                      ) : null}
                    </div>
                  ) : null}
                </div>
              ) : null}
            </section>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "ul",
    "iframe",
    "table",
    "textInput2",
    "textInput3",
    "textInput4",
    "textInput5",
    "textInput6",
    "textInput7",
    "textInput8",
    "textInput10",
    "textInput9"
  ],
  h1: ["h1"],
  ul: ["ul"],
  iframe: ["iframe"],
  table: ["table"],
  textInput2: ["textInput2"],
  textInput3: ["textInput3"],
  textInput4: ["textInput4"],
  textInput5: ["textInput5"],
  textInput6: ["textInput6"],
  textInput7: ["textInput7"],
  textInput8: ["textInput8"],
  textInput10: ["textInput10"],
  textInput9: ["textInput9"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  ul: "ul";
  iframe: typeof Iframe;
  table: typeof RichTable;
  textInput2: typeof TextInput;
  textInput3: typeof TextInput;
  textInput4: typeof TextInput;
  textInput5: typeof TextInput;
  textInput6: typeof TextInput;
  textInput7: typeof TextInput;
  textInput8: typeof TextInput;
  textInput10: typeof TextInput;
  textInput9: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    ul: makeNodeComponent("ul"),
    iframe: makeNodeComponent("iframe"),
    table: makeNodeComponent("table"),
    textInput2: makeNodeComponent("textInput2"),
    textInput3: makeNodeComponent("textInput3"),
    textInput4: makeNodeComponent("textInput4"),
    textInput5: makeNodeComponent("textInput5"),
    textInput6: makeNodeComponent("textInput6"),
    textInput7: makeNodeComponent("textInput7"),
    textInput8: makeNodeComponent("textInput8"),
    textInput10: makeNodeComponent("textInput10"),
    textInput9: makeNodeComponent("textInput9"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
